<sami><head><Title></Title><style type='text/css'><!--.en { Name:English+(auto-generated) ;lang:en; SAMIType:CC;}--></style><SYNC Start=0><P class='en'><font color="#CCCCCC">but welcome</font><font color="#E5E5E5"> to another assembly tutorial</font><SYNC Start=2580><P class='en'>we&#39;re going<font color="#E5E5E5"> to write an actual</font><SYNC Start=4440><P class='en'>functioning program that are similar<font color="#E5E5E5"> to</font><SYNC Start=7529><P class='en'>one that<font color="#E5E5E5"> you&#39;d find in C or</font><font color="#CCCCCC"> C++ okay so</font><SYNC Start=11099><P class='en'>let&#39;s get to<font color="#CCCCCC"> it if you just</font><font color="#E5E5E5"> make it go</font><SYNC Start=13980><P class='en'>ahead<font color="#E5E5E5"> and make a file call it assembly</font><SYNC Start=16619><P class='en'><font color="#E5E5E5">one ASM or whatever else you want to</font><SYNC Start=18779><P class='en'>name it<font color="#E5E5E5"> so we have our file with the ASM</font><SYNC Start=21920><P class='en'>extension for assembly<font color="#E5E5E5"> and so let&#39;s set</font><SYNC Start=24810><P class='en'>up our<font color="#CCCCCC"> basic</font><font color="#E5E5E5"> template for all of our</font><SYNC Start=27570><P class='en'>assembly<font color="#E5E5E5"> program</font><SYNC Start=34500><P class='en'>and usually<font color="#CCCCCC"> this is what you have for</font><SYNC Start=38810><P class='en'><font color="#E5E5E5">any typical assembly program that you</font><SYNC Start=42210><P class='en'><font color="#E5E5E5">want to write you have</font><font color="#CCCCCC"> your your data</font><SYNC Start=44520><P class='en'>section which is going to<font color="#E5E5E5"> include</font><SYNC Start=47780><P class='en'>initialized data<font color="#CCCCCC"> and you&#39;re going to</font><SYNC Start=52200><P class='en'>have your text section<font color="#E5E5E5"> which is going to</font><SYNC Start=54270><P class='en'>include all<font color="#CCCCCC"> your actual assembly</font><font color="#E5E5E5"> code</font><SYNC Start=57420><P class='en'>and here you&#39;re<font color="#E5E5E5"> going to have your</font><SYNC Start=61160><P class='en'>uninitialized variables<font color="#E5E5E5"> so these are</font><SYNC Start=68400><P class='en'><font color="#E5E5E5">four variables and these are four</font><SYNC Start=70200><P class='en'><font color="#E5E5E5">variables as well and you can</font><font color="#CCCCCC"> put these</font><SYNC Start=72420><P class='en'><font color="#E5E5E5">arrangement in in however</font><font color="#CCCCCC"> way you please</font><SYNC Start=76010><P class='en'><font color="#E5E5E5">just so long</font><font color="#CCCCCC"> as you have</font><font color="#E5E5E5"> them and really</font><SYNC Start=80310><P class='en'>if you<font color="#CCCCCC"> don&#39;t use any uninitialized</font><SYNC Start=83250><P class='en'><font color="#E5E5E5">variables so you don&#39;t need to have</font><font color="#CCCCCC"> one</font><SYNC Start=84900><P class='en'><font color="#CCCCCC">so let&#39;s go ahead</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> erase it</font><font color="#E5E5E5"> for now</font><SYNC Start=87060><P class='en'><font color="#E5E5E5">because for this program we&#39;re not going</font><SYNC Start=89790><P class='en'><font color="#E5E5E5">to actually</font><font color="#CCCCCC"> need one okay so now let&#39;s</font><SYNC Start=93869><P class='en'>write<font color="#E5E5E5"> a simple program</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> displays</font><SYNC Start=95670><P class='en'><font color="#E5E5E5">something to the screen</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> in this case</font><SYNC Start=99150><P class='en'><font color="#E5E5E5">we&#39;re not going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use the system call</font><SYNC Start=100830><P class='en'>and<font color="#E5E5E5"> we&#39;re not going to use the Linux</font><SYNC Start=104700><P class='en'>system call we&#39;re actually going<font color="#E5E5E5"> to use</font><SYNC Start=106380><P class='en'>a real<font color="#E5E5E5"> C type of function called the</font><SYNC Start=111540><P class='en'>printf<font color="#CCCCCC"> if you&#39;ve done any C programming</font><SYNC Start=115140><P class='en'><font color="#CCCCCC">you&#39;re very well aware of</font><font color="#E5E5E5"> what this is</font><SYNC Start=118130><P class='en'><font color="#E5E5E5">but it&#39;s</font><font color="#CCCCCC"> just a a function for</font><font color="#E5E5E5"> those of</font><SYNC Start=121530><P class='en'>you who don&#39;t<font color="#E5E5E5"> already know</font><SYNC Start=123600><P class='en'><font color="#CCCCCC">okay so let&#39;s actually define some</font><SYNC Start=126530><P class='en'>things that we&#39;re going to<font color="#E5E5E5"> be printing</font><SYNC Start=128640><P class='en'>to the screen<font color="#CCCCCC"> and first of all we&#39;re</font><SYNC Start=130739><P class='en'>going to<font color="#E5E5E5"> print out a message so message</font><SYNC Start=138060><P class='en'>and<font color="#E5E5E5"> zero so it&#39;s good to document stuff</font><SYNC Start=145830><P class='en'>as you go<font color="#CCCCCC"> ahead and write stuff because</font><SYNC Start=148950><P class='en'>here<font color="#E5E5E5"> this means this is</font><font color="#CCCCCC"> a comment and</font><SYNC Start=151410><P class='en'>the<font color="#E5E5E5"> zero is likes having a null at the</font><SYNC Start=155849><P class='en'>end of your<font color="#CCCCCC"> message so that</font><font color="#E5E5E5"> when</font><SYNC Start=158700><P class='en'><font color="#E5E5E5">assembly displays this message it knows</font><SYNC Start=160860><P class='en'>where to stop<font color="#E5E5E5"> so this tells it to stop</font><SYNC Start=163380><P class='en'><font color="#CCCCCC">and ten is for our heritage</font><font color="#E5E5E5"> return so we</font><SYNC Start=168239><P class='en'>return<font color="#E5E5E5"> to the next line and this is that</font><SYNC Start=171209><P class='en'>from message that we want<font color="#CCCCCC"> to display</font><SYNC Start=173360><P class='en'><font color="#CCCCCC">okay</font><font color="#E5E5E5"> so yeah that&#39;s it so</font><font color="#CCCCCC"> and remember</font><SYNC Start=177630><P class='en'><font color="#E5E5E5">that our labels are treated as memory</font><SYNC Start=181260><P class='en'>locations<font color="#CCCCCC"> okay so now we&#39;re inside of</font><SYNC Start=183959><P class='en'>our text<font color="#CCCCCC"> section which is our code so we</font><SYNC Start=187590><P class='en'>can<font color="#E5E5E5"> actually begin coding</font><font color="#CCCCCC"> what we&#39;re</font><SYNC Start=190019><P class='en'>going to do now is do a global main all<SYNC Start=193890><P class='en'>this does it tells us that<font color="#CCCCCC"> we&#39;re going</font><SYNC Start=196260><P class='en'><font color="#CCCCCC">to have a</font><font color="#E5E5E5"> label</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> main and what</font><SYNC Start=199410><P class='en'>global does it&#39;s a reserved<font color="#CCCCCC"> word inside</font><SYNC Start=202980><P class='en'><font color="#E5E5E5">of the assembly</font><font color="#CCCCCC"> language to have our</font><SYNC Start=207109><P class='en'>symbol here main be able to be<font color="#CCCCCC"> available</font><SYNC Start=210900><P class='en'>outside<font color="#E5E5E5"> of our</font><font color="#CCCCCC"> immediate program</font><font color="#E5E5E5"> so some</font><SYNC Start=214590><P class='en'>other program later on the road<font color="#E5E5E5"> will be</font><SYNC Start=216870><P class='en'><font color="#CCCCCC">able to find our program</font><font color="#E5E5E5"> and know where</font><SYNC Start=219900><P class='en'>to<font color="#E5E5E5"> start</font><SYNC Start=220620><P class='en'>okay so we have<font color="#CCCCCC"> our label so let&#39;s get</font><SYNC Start=223380><P class='en'><font color="#E5E5E5">coding first thing we want to do is set</font><SYNC Start=226650><P class='en'>up our stack frame which is push EBP<SYNC Start=229730><P class='en'><font color="#E5E5E5">because we&#39;re saving whoever called</font><SYNC Start=232620><P class='en'>main<font color="#CCCCCC"> R which is in this</font><font color="#E5E5E5"> case it&#39;s going</font><SYNC Start=234840><P class='en'>to<font color="#E5E5E5"> be an operating system that&#39;s</font><font color="#CCCCCC"> going</font><SYNC Start=236250><P class='en'>to call main<font color="#CCCCCC"> we&#39;re going to save it&#39;s a</font><SYNC Start=238970><P class='en'>base pointer and we&#39;re going to create<font color="#E5E5E5"> a</font><SYNC Start=242160><P class='en'>new one by<font color="#CCCCCC"> doing</font><SYNC Start=246480><P class='en'><font color="#E5E5E5">okay so this takes the stack pointer</font><SYNC Start=249820><P class='en'>moves it into EBP<font color="#CCCCCC"> based on</font><font color="#E5E5E5"> to</font><SYNC Start=254370><P class='en'><font color="#CCCCCC">effectively creating a</font><font color="#E5E5E5"> new one so that&#39;s</font><SYNC Start=257380><P class='en'><font color="#E5E5E5">step setting up our stack frame and so</font><SYNC Start=259989><P class='en'>now let&#39;s<font color="#E5E5E5"> destroy your stack frame after</font><SYNC Start=263740><P class='en'><font color="#CCCCCC">we&#39;re</font><font color="#E5E5E5"> done</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the function so I&#39;m</font><SYNC Start=266800><P class='en'>going<font color="#E5E5E5"> to do</font><SYNC Start=269090><P class='en'>we&#39;re going to restore this<font color="#E5E5E5"> one that we</font><SYNC Start=272460><P class='en'>say we&#39;re going<font color="#E5E5E5"> to restore the stack</font><SYNC Start=274230><P class='en'>pointer<SYNC Start=281199><P class='en'>and so<font color="#E5E5E5"> this is entire this is the entire</font><SYNC Start=284169><P class='en'>function it&#39;s like having like<font color="#E5E5E5"> having</font><SYNC Start=288009><P class='en'><font color="#E5E5E5">Lord</font><font color="#CCCCCC"> main and in between the parentheses</font><SYNC Start=294159><P class='en'><font color="#E5E5E5">here is where our code will go so that&#39;s</font><SYNC Start=298389><P class='en'>what&#39;s<font color="#E5E5E5"> going on</font><font color="#CCCCCC"> now let&#39;s go ahead</font><font color="#E5E5E5"> and</font><SYNC Start=301150><P class='en'>call this function or<font color="#E5E5E5"> print out the</font><SYNC Start=303400><P class='en'>message to the screen and how we do<font color="#E5E5E5"> that</font><SYNC Start=305800><P class='en'>is by<font color="#E5E5E5"> saying push what this does is it</font><SYNC Start=309430><P class='en'>remember this is our<font color="#CCCCCC"> label up here it</font><SYNC Start=311860><P class='en'>pushes<font color="#E5E5E5"> this address</font><font color="#CCCCCC"> so all this does</font><font color="#E5E5E5"> is</font><SYNC Start=315089><P class='en'>translate to something<font color="#E5E5E5"> like push</font><font color="#CCCCCC"> let&#39;s</font><SYNC Start=319900><P class='en'>say that<font color="#E5E5E5"> was a memory address it pushes</font><SYNC Start=321400><P class='en'>a memory address into<font color="#E5E5E5"> onto the stack and</font><SYNC Start=324249><P class='en'><font color="#CCCCCC">now</font><font color="#E5E5E5"> we&#39;re going to call printf I forgot</font><SYNC Start=329110><P class='en'><font color="#E5E5E5">to mention them before we call printf</font><SYNC Start=330669><P class='en'><font color="#E5E5E5">what we need to be able to make</font><font color="#CCCCCC"> sure</font><SYNC Start=332529><P class='en'><font color="#E5E5E5">that our program knows where knows that</font><SYNC Start=337210><P class='en'><font color="#E5E5E5">out we&#39;re using</font><font color="#CCCCCC"> a variable that has not</font><SYNC Start=339520><P class='en'>been declared in our program but<font color="#E5E5E5"> is</font><SYNC Start=341319><P class='en'><font color="#E5E5E5">available somewhere else and how we do</font><SYNC Start=344319><P class='en'><font color="#E5E5E5">that is by saying external printf that&#39;s</font><SYNC Start=349029><P class='en'>all<SYNC Start=349449><P class='en'>this tells the assembly program that our<SYNC Start=354870><P class='en'>printf function is not inside<font color="#CCCCCC"> of our</font><font color="#E5E5E5"> our</font><SYNC Start=358659><P class='en'>source<font color="#E5E5E5"> code it&#39;s available externally</font><SYNC Start=362430><P class='en'><font color="#E5E5E5">simple enough</font><font color="#CCCCCC"> ok so what we have here is</font><SYNC Start=366069><P class='en'>the creation of<font color="#E5E5E5"> the stack</font><font color="#CCCCCC"> destruction of</font><SYNC Start=369580><P class='en'>the stack<font color="#E5E5E5"> our function body and we push</font><SYNC Start=373060><P class='en'>the memory address<font color="#E5E5E5"> of our message and we</font><SYNC Start=375849><P class='en'>calling the printf<font color="#CCCCCC"> function and that&#39;s</font><SYNC Start=377919><P class='en'>that&#39;s<font color="#CCCCCC"> it so we save our file</font><font color="#E5E5E5"> and we go</font><SYNC Start=380740><P class='en'>to the command<font color="#E5E5E5"> line and we&#39;re going to</font><SYNC Start=382749><P class='en'>say you know<font color="#CCCCCC"> list all the file or file</font><SYNC Start=385029><P class='en'>is there so we&#39;re<font color="#E5E5E5"> going to say</font><font color="#CCCCCC"> nessam</font><SYNC Start=387879><P class='en'>which is net wide assembler<font color="#E5E5E5"> a file</font><SYNC Start=391899><P class='en'><font color="#CCCCCC">format</font><font color="#E5E5E5"> e.l.f output to</font><font color="#CCCCCC"> asm1 that&#39;s the</font><SYNC Start=397779><P class='en'>name of<font color="#CCCCCC"> the father we&#39;re going to be</font><SYNC Start=399009><P class='en'><font color="#E5E5E5">creating and the input file is going to</font><SYNC Start=401919><P class='en'><font color="#E5E5E5">be a</font><font color="#CCCCCC"> s m1 ASM okay</font><SYNC Start=405229><P class='en'>and<font color="#CCCCCC"> Don&#39;s you can see it creates the</font><SYNC Start=408860><P class='en'>file that<font color="#CCCCCC"> we are looking</font><font color="#E5E5E5"> for now what</font><SYNC Start=411289><P class='en'>we&#39;re getting do now is use GCC the<SYNC Start=414430><P class='en'><font color="#CCCCCC">general C++ compiler and output the</font><SYNC Start=418009><P class='en'><font color="#CCCCCC">final program this is</font><font color="#E5E5E5"> the output and use</font><SYNC Start=421789><P class='en'>the input<font color="#E5E5E5"> as</font><font color="#CCCCCC"> ASM 1.0</font><font color="#E5E5E5"> and it should</font><SYNC Start=426319><P class='en'>compile successful<font color="#E5E5E5"> and as you can see</font><SYNC Start=428659><P class='en'><font color="#E5E5E5">here this is our actual program and now</font><SYNC Start=431870><P class='en'>we&#39;re going to do dots for slash asm1<SYNC Start=435289><P class='en'><font color="#E5E5E5">and if all goes well it should compile</font><SYNC Start=437569><P class='en'>successfully and as we<font color="#E5E5E5"> just saw it</font><SYNC Start=440659><P class='en'><font color="#E5E5E5">actually did display our message in</font><SYNC Start=442789><P class='en'>assembly so<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> we have just gone</font><SYNC Start=446180><P class='en'>through a successful simple<font color="#E5E5E5"> scene sorry</font><SYNC Start=449749><P class='en'>assembly program and written something<SYNC Start=453169><P class='en'><font color="#E5E5E5">that works in the next tutorial we&#39;ll go</font><SYNC Start=455240><P class='en'><font color="#E5E5E5">in</font><font color="#CCCCCC"> into more depth and show you some</font><SYNC Start=457669><P class='en'>more<font color="#CCCCCC"> cool stuff with assembly and then</font><SYNC Start=459439><P class='en'>rate and subscribe<SYNC Start=460490><P class='en'>okay thank you<font color="#E5E5E5"> I&#39;ll see you next time</font></body></sami>