<sami><head><Title></Title><style type='text/css'><!--.en { Name:English+(auto-generated) ;lang:en; SAMIType:CC;}--></style><SYNC Start=30><P class='en'>all right everybody<font color="#E5E5E5"> Nets a</font><font color="#CCCCCC"> toy</font><font color="#E5E5E5"> we&#39;re</font><SYNC Start=2159><P class='en'><font color="#E5E5E5">going to demonstrate how to print</font><SYNC Start=3480><P class='en'><font color="#CCCCCC">command line arguments to the screen and</font><SYNC Start=5810><P class='en'>to do that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> or we can use our</font><SYNC Start=8610><P class='en'>variables over<font color="#E5E5E5"> here and we can display</font><SYNC Start=11460><P class='en'>the<font color="#E5E5E5"> number of</font><font color="#CCCCCC"> parameters to the screen</font><SYNC Start=13200><P class='en'>and<font color="#CCCCCC"> as well as the</font><font color="#E5E5E5"> actual parameters and</font><SYNC Start=15690><P class='en'>parameters<font color="#CCCCCC"> or a set</font><font color="#E5E5E5"> of commands or data</font><SYNC Start=19680><P class='en'>that<font color="#CCCCCC"> you pass your program for</font><font color="#E5E5E5"> example</font><SYNC Start=21420><P class='en'><font color="#CCCCCC">if we&#39;re to</font><font color="#E5E5E5"> come over to the console and</font><SYNC Start=24420><P class='en'>say run our program we can pass it<SYNC Start=28140><P class='en'>strings like X Y<font color="#CCCCCC"> 1020 or Flags</font><SYNC Start=34350><P class='en'><font color="#E5E5E5">if we want things like that those are</font><SYNC Start=37230><P class='en'>the<font color="#E5E5E5"> command line arguments passed to a</font><SYNC Start=39870><P class='en'>program so we can<font color="#E5E5E5"> see how to get print</font><SYNC Start=44040><P class='en'>out the number<font color="#CCCCCC"> of parameters we or pass</font><SYNC Start=46260><P class='en'>to a program as well as print out the<SYNC Start=49530><P class='en'>individual<font color="#E5E5E5"> X Y</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> 24 30 and so on and so</font><SYNC Start=54420><P class='en'>on<SYNC Start=54600><P class='en'><font color="#CCCCCC">alright so now we</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to of course</font><font color="#E5E5E5"> use</font><SYNC Start=57090><P class='en'>order our stack frame<font color="#E5E5E5"> to be able</font><font color="#CCCCCC"> to make</font><SYNC Start=61320><P class='en'>references to<font color="#E5E5E5"> the parameters pass</font><font color="#CCCCCC"> onto a</font><SYNC Start=63930><P class='en'>program and as well as the local<font color="#CCCCCC"> crap</font><SYNC Start=67170><P class='en'>local variables we declare and if you<SYNC Start=69720><P class='en'><font color="#E5E5E5">remember we talked</font><font color="#CCCCCC"> about the stack in</font><SYNC Start=71610><P class='en'>detail in my previous videos but<font color="#E5E5E5"> real</font><SYNC Start=75600><P class='en'>quick the stack looks like this where<SYNC Start=77250><P class='en'>you have<font color="#E5E5E5"> positive</font><font color="#CCCCCC"> offset of for</font><font color="#E5E5E5"> making</font><SYNC Start=79590><P class='en'>references to parameters<font color="#E5E5E5"> so the first</font><SYNC Start=81960><P class='en'>one is<font color="#CCCCCC"> +8</font><font color="#E5E5E5"> the second one is plus 12</font><font color="#CCCCCC"> and</font><SYNC Start=85439><P class='en'>so if we come over here<font color="#E5E5E5"> we</font><font color="#CCCCCC"> will see</font><font color="#E5E5E5"> that</font><SYNC Start=87450><P class='en'>here EBP<font color="#CCCCCC"> plus eight is pointing to the</font><SYNC Start=91950><P class='en'><font color="#CCCCCC">command-line arguments of the number of</font><SYNC Start=93799><P class='en'><font color="#E5E5E5">parameters</font><font color="#CCCCCC"> passed so program as well as</font><SYNC Start=97549><P class='en'><font color="#E5E5E5">EBP plus</font><font color="#CCCCCC"> twelve</font><font color="#E5E5E5"> planning to the address</font><SYNC Start=100619><P class='en'><font color="#CCCCCC">that contains all the strings</font><font color="#E5E5E5"> that were</font><SYNC Start=103350><P class='en'>passed to our program<font color="#CCCCCC"> ok so I should</font><SYNC Start=106170><P class='en'><font color="#E5E5E5">mention that</font><font color="#CCCCCC"> I moved the value of</font><font color="#E5E5E5"> 0 into</font><SYNC Start=110070><P class='en'>the register<font color="#E5E5E5"> CX register which is</font><font color="#CCCCCC"> the</font><SYNC Start=112950><P class='en'>counter<font color="#CCCCCC"> register now one and</font><font color="#E5E5E5"> I&#39;m doing</font><SYNC Start=115290><P class='en'>this<font color="#E5E5E5"> because we&#39;re</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be using a</font><SYNC Start=116759><P class='en'>loop to display<font color="#CCCCCC"> all the</font><font color="#E5E5E5"> parameters</font><SYNC Start=120840><P class='en'><font color="#CCCCCC">passed our program</font><font color="#E5E5E5"> because it can get</font><SYNC Start=122969><P class='en'>very tedious to<font color="#CCCCCC"> have to repeat the</font><font color="#E5E5E5"> same</font><SYNC Start=124740><P class='en'>instructions over<font color="#E5E5E5"> and over again so</font><SYNC Start=126619><P class='en'><font color="#CCCCCC">using a loop makes it more efficient so</font><SYNC Start=129780><P class='en'><font color="#E5E5E5">we write less code</font><SYNC Start=131210><P class='en'>and do more<font color="#CCCCCC"> things</font><font color="#E5E5E5"> and this is</font><font color="#CCCCCC"> the</font><SYNC Start=133730><P class='en'>structure<font color="#E5E5E5"> of our loop</font><font color="#CCCCCC"> and here is going</font><SYNC Start=136670><P class='en'>to<font color="#E5E5E5"> be the body of</font><font color="#CCCCCC"> our loop</font><font color="#E5E5E5"> so I made a</font><SYNC Start=140390><P class='en'>label for<font color="#E5E5E5"> the loop and this of course</font><SYNC Start=142100><P class='en'>labels<font color="#CCCCCC"> are memory addresses</font><font color="#E5E5E5"> and I&#39;m</font><SYNC Start=145100><P class='en'>going to<font color="#E5E5E5"> say I&#39;m going</font><font color="#CCCCCC"> to compare the</font><SYNC Start=146900><P class='en'><font color="#E5E5E5">council register of</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> compared to the</font><SYNC Start=149660><P class='en'>number of<font color="#E5E5E5"> parameters</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> in this case</font><SYNC Start=153650><P class='en'>we&#39;re going to<font color="#E5E5E5"> be passing</font><font color="#CCCCCC"> five</font><SYNC Start=154700><P class='en'><font color="#CCCCCC">parameters</font><font color="#E5E5E5"> and we&#39;re going to</font><font color="#CCCCCC"> compare</font><SYNC Start=157340><P class='en'>those two values<font color="#CCCCCC"> and if it&#39;s not</font><font color="#E5E5E5"> equal</font><SYNC Start=161350><P class='en'>so in other words if<font color="#E5E5E5"> 0 is not</font><font color="#CCCCCC"> equal to</font><font color="#E5E5E5"> 5</font><SYNC Start=164540><P class='en'><font color="#E5E5E5">it&#39;ll jump here and then we&#39;ll just keep</font><SYNC Start=168110><P class='en'><font color="#CCCCCC">increasing the value of</font><font color="#E5E5E5"> the counter</font><SYNC Start=170540><P class='en'><font color="#CCCCCC">register inside of the</font><font color="#E5E5E5"> loop</font><font color="#CCCCCC"> so that each</font><SYNC Start=173660><P class='en'><font color="#CCCCCC">time it adds 1 to it each time all right</font><SYNC Start=177830><P class='en'><font color="#E5E5E5">so of course this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the body of our</font><SYNC Start=182140><P class='en'>loop<font color="#CCCCCC"> prior to calling external functions</font><SYNC Start=186200><P class='en'>or even calling your own functions<font color="#E5E5E5"> it&#39;s</font><SYNC Start=189890><P class='en'>a good habit<font color="#CCCCCC"> to get into</font><font color="#E5E5E5"> by preserving</font><SYNC Start=192890><P class='en'><font color="#E5E5E5">the registers that you&#39;re depending on</font><SYNC Start=195760><P class='en'>because we&#39;re depending on the<font color="#E5E5E5"> BX</font><SYNC Start=198320><P class='en'><font color="#E5E5E5">register holding the address of our list</font><SYNC Start=202070><P class='en'>of parameters<font color="#CCCCCC"> and because we&#39;re</font><SYNC Start=205130><P class='en'>depending on the<font color="#E5E5E5"> ax register holding the</font><SYNC Start=208070><P class='en'>number of<font color="#E5E5E5"> parameters</font><font color="#CCCCCC"> pass</font><font color="#E5E5E5"> well program</font><SYNC Start=210170><P class='en'>and because we&#39;re use accounting on the<SYNC Start=213470><P class='en'>CX register as being the counter for<SYNC Start=215660><P class='en'>loop we want<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> sure that we</font><SYNC Start=217850><P class='en'>preserve<font color="#E5E5E5"> those values on the stack</font><SYNC Start=219740><P class='en'>before<font color="#E5E5E5"> calling external functions</font><SYNC Start=222200><P class='en'>because the printf function<font color="#E5E5E5"> will modify</font><SYNC Start=225350><P class='en'>some of these<font color="#E5E5E5"> registers and to cover</font><SYNC Start=227960><P class='en'><font color="#CCCCCC">ourselves we want to</font><font color="#E5E5E5"> push these values</font><SYNC Start=230720><P class='en'>on the stack and<font color="#E5E5E5"> then call the printf</font><SYNC Start=233840><P class='en'><font color="#CCCCCC">function and then what the printf</font><SYNC Start=236720><P class='en'><font color="#CCCCCC">function is done we</font><font color="#E5E5E5"> want to pop the</font><SYNC Start=238820><P class='en'>stack<font color="#CCCCCC"> back</font><font color="#E5E5E5"> into the registers but notice</font><SYNC Start=242150><P class='en'>how we&#39;re<font color="#E5E5E5"> popping it in reverse order</font><SYNC Start=244160><P class='en'>and then<font color="#E5E5E5"> we can go ahead and</font><font color="#CCCCCC"> call the</font><SYNC Start=246590><P class='en'>printf<font color="#CCCCCC"> function alright so here we&#39;re</font><SYNC Start=249260><P class='en'>calling the printf that<font color="#CCCCCC"> statement</font><font color="#E5E5E5"> with</font><SYNC Start=251420><P class='en'>the address contained<font color="#E5E5E5"> inside</font><font color="#CCCCCC"> of the BX</font><SYNC Start=255260><P class='en'>register and then now we&#39;re going<font color="#E5E5E5"> to be</font><SYNC Start=257570><P class='en'>proud<SYNC Start=259060><P class='en'>displaying the message<font color="#E5E5E5"> arguments</font><SYNC Start=263410><P class='en'><font color="#CCCCCC">reserved</font><font color="#E5E5E5"> and we&#39;re calling the printf</font><SYNC Start=266330><P class='en'><font color="#E5E5E5">function now this is something new that</font><SYNC Start=268940><P class='en'><font color="#E5E5E5">I</font><font color="#CCCCCC"> haven&#39;t been doing</font><font color="#E5E5E5"> it in my previous</font><SYNC Start=271100><P class='en'><font color="#E5E5E5">videos we&#39;re adding</font><font color="#CCCCCC"> eight</font><font color="#E5E5E5"> to the stack</font><SYNC Start=275810><P class='en'>pointer<font color="#CCCCCC"> and as you know the stack</font><font color="#E5E5E5"> goes</font><SYNC Start=278690><P class='en'>down towards<font color="#E5E5E5"> memory it&#39;s constantly</font><SYNC Start=281780><P class='en'>going<font color="#CCCCCC"> down so to clean up the stack you</font><SYNC Start=284090><P class='en'>need to add<font color="#CCCCCC"> 8 to bring it back up</font><SYNC Start=287060><P class='en'><font color="#E5E5E5">towards positive memory and so this is</font><SYNC Start=291470><P class='en'>important because how do we if we don&#39;t<SYNC Start=293450><P class='en'>have this<font color="#E5E5E5"> statement right here</font><font color="#CCCCCC"> this will</font><SYNC Start=296750><P class='en'>not<font color="#E5E5E5"> this program will not run correctly</font><SYNC Start=298550><P class='en'><font color="#E5E5E5">because the stack would be corrupted for</font><SYNC Start=301400><P class='en'>example here I&#39;m pushing for<font color="#E5E5E5"> binds and</font><SYNC Start=303860><P class='en'>here I&#39;m pushing<font color="#CCCCCC"> 4 bytes</font><font color="#E5E5E5"> so in total I</font><SYNC Start=306110><P class='en'>pushed<font color="#E5E5E5"> 8 bytes and so</font><font color="#CCCCCC"> therefore I need</font><SYNC Start=309290><P class='en'><font color="#E5E5E5">to add 8 to</font><font color="#CCCCCC"> stack pointer to clean it up</font><SYNC Start=312710><P class='en'><font color="#CCCCCC">so the last thing we want to do is now</font><SYNC Start=315710><P class='en'>to<font color="#E5E5E5"> increase our counter by</font><font color="#CCCCCC"> 1 after we</font><SYNC Start=320360><P class='en'>have<font color="#E5E5E5"> restored the values pushed onto</font><font color="#CCCCCC"> the</font><SYNC Start=323510><P class='en'><font color="#E5E5E5">onto</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> stack after we restore the</font><SYNC Start=326390><P class='en'>values we want<font color="#E5E5E5"> to increase them by 1 and</font><SYNC Start=329060><P class='en'>as well as increase the<font color="#CCCCCC"> address that</font><SYNC Start=332210><P class='en'><font color="#CCCCCC">contains a list of parameters by 4</font><font color="#E5E5E5"> so we</font><SYNC Start=336170><P class='en'>move<font color="#CCCCCC"> to the next</font><font color="#E5E5E5"> one and so after that</font><SYNC Start=338300><P class='en'><font color="#E5E5E5">we can go ahead and compile a program</font><SYNC Start=340150><P class='en'><font color="#CCCCCC">first of all let&#39;s go ahead</font><font color="#E5E5E5"> and display</font><SYNC Start=343070><P class='en'>what my script<font color="#E5E5E5"> looks like to compile</font><SYNC Start=345770><P class='en'>this<font color="#CCCCCC"> program</font><SYNC Start=348409><P class='en'>so this is the beginning<SYNC Start=353160><P class='en'>and<SYNC Start=355379><P class='en'>it comes down<font color="#E5E5E5"> over here after</font><font color="#CCCCCC"> it&#39;s</font><SYNC Start=357270><P class='en'>compiled successfully<font color="#CCCCCC"> we go ahead</font><font color="#E5E5E5"> and</font><SYNC Start=359909><P class='en'>call<font color="#CCCCCC"> our program and</font><font color="#E5E5E5"> we pass it all you</font><SYNC Start=363569><P class='en'>man<font color="#CCCCCC"> 1 2 3 &amp; 4 but</font><font color="#E5E5E5"> as well on but there&#39;s</font><SYNC Start=369180><P class='en'>actually<font color="#CCCCCC"> five because the program name</font><SYNC Start=371729><P class='en'>is<font color="#E5E5E5"> included</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> this is what&#39;s going to</font><SYNC Start=374699><P class='en'><font color="#E5E5E5">be displayed to the screen so let&#39;s go</font><SYNC Start=377490><P class='en'><font color="#CCCCCC">ahead</font><font color="#E5E5E5"> and compile I&#39;m running so as you</font><SYNC Start=381479><P class='en'>can see<font color="#E5E5E5"> we compile and run our program</font><SYNC Start=383520><P class='en'>and this<font color="#E5E5E5"> was</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> result the program name</font><SYNC Start=386610><P class='en'>is<font color="#E5E5E5"> displayed as</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> first one that we</font><SYNC Start=388529><P class='en'>print out argument<font color="#CCCCCC"> 1 2 3 &amp; 4 and then</font><SYNC Start=392610><P class='en'><font color="#E5E5E5">the program terminates so that&#39;s how we</font><SYNC Start=394649><P class='en'>display<font color="#E5E5E5"> comment on arguments to the</font><SYNC Start=396209><P class='en'>screen<font color="#E5E5E5"> please rate and subscribe thank</font><SYNC Start=398639><P class='en'><font color="#E5E5E5">you</font></body></sami>